// Name : Emeka Mkpume
// File : MVC_LAB4_Language_Feature
// Date : March 5, 2020.

// MVC M : Models     ==> product.cs, shoppingCart.cs, MyExtensionMethods.cs
// MVC V : Views      ==> razorview == index.cshtml
// MVC C : Controller ==> controller.cs

//Controller.cs

using Microsoft.AspNetCore.Mvc;
using LanguageFeature.Models;
using System;


namespace LanguageFeature.Controllers
{
    public class HomeController : Controller
    {
        bool FilterByPrice(Product p)
        {
            return (p?.Price ?? 0) >= 20;
        }
        public ViewResult Index()
        {
            //ShoppingCart cart = new ShoppingCart { Products = Product.GetProducts() };
            Product[] productArray = {
           new Product {Name = "Kayak", Price = 275M},
           new Product {Name = "Lifejacket", Price = 48.95M},
           new Product {Name = "Soccer ball", Price = 19.50M},
           new Product {Name = "Corner flag", Price = 34.95M}
        };
            Func<Product, bool> nameFilter = delegate (Product prod)
            {
                return prod?.Name?[0] == 'S';
            };
            decimal priceFilterTotal = productArray
            .Filter(FilterByPrice)
            .TotalPrices();
            decimal nameFilterTotal = productArray
            .Filter(nameFilter)
            .TotalPrices();
            return View("Index", new string[] {
            $"Price Total: {priceFilterTotal:C2}",
            $"Name Total: {nameFilterTotal:C2}" });

        }
    }
}

            //   object[] data = new object[] { 275M, 29.95M,
            // "apple", "orange", 100, 10 };
            //decimal total = 0;
            //for (int i = 0; i < data.Length; i++)
            //{
            //  switch (data[i])
            //{
            //  case decimal decimalValue:
            //    total += decimalValue;
            //  break;
            //case int intValue when intValue > 50:
            //  total += intValue;
            //break;
            //}
            //}
            //return View("Index", new string[] { $"Total: {total:C2}" });

            //["Kayak"] = new Product { Name = "Kayak", Price = 275M },
            //["Lifejacket"] = new Product { Name = "Lifejacket", Price = 48.95M }
            //Dictionary<string, Product> products = new Dictionary<string, Product>
            //{
            //  { "Kayak", new Product { Name = "Kayak", Price = 275M } },
            //{ "Lifejacket", new Product{ Name = "Lifejacket", Price = 48.95M } 
            //}};
            //return View("Index", products.Keys);
            //string[] names = new string[3];
            //names[0] = "Bob";
            //names[1] = "Joe";
            //names[2] = "Alice";

            //return View("Index", names);
            //OR
            //return View("Index", new string[] { "Bob", "Joe", "Alice" });
            //}
            //List<string> results = new List<string>();
            //foreach (Product p in Product.GetProducts())
            //{
            //  string name = p?.Name ?? "<no Name>";
            //decimal? price = p?.Price ?? 0;
            //string relatedName = p?.Related.Name ?? "<None>";
            //results.Add(string.Format("Name: {0}, Price: {1}, Related: {2}",
            // name, price, relatedName)) ;
            //results.Add(string.Format($"Name: {name}, Price: {price}," + $" Related: {relatedName}"));

            // return View(results);
            //}
        
//MyExtensionMethod.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace LanguageFeature.Models
{
    public static class MyExtensionMethods
    {
        public static decimal TotalPrices(this IEnumerable<Product> products)
        {
            decimal total = 0;
            foreach (Product prod in products)
            {
                total += prod?.Price ?? 0;
            }
            return total;
        }
        public static IEnumerable<Product> Filter(
        this IEnumerable<Product> productEnum,
        Func<Product, bool> selector)
        {
            foreach (Product prod in productEnum)
            {
                if (selector(prod))
                {
                    yield return prod;
                }
            }
        }
        public static IEnumerable<Product> FilterByPrice(
        this IEnumerable<Product> productEnum, decimal minimumPrice)
        {
            foreach (Product prod in productEnum)
            {
                if ((prod?.Price ?? 0) >= minimumPrice)
                {
                    yield return prod;
                }
            }
        }
        public static IEnumerable<Product> FilterByName(
        this IEnumerable<Product> productEnum, char firstLetter)
        {
            foreach (Product prod in productEnum)
            {
                if (prod?.Name?[0] == firstLetter)
                {
                    yield return prod;
                }
            }
        }
    }
}

//Product.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace LanguageFeature.Models
{
    public class Product
    {
        public Product(bool stock = true)
        {
            InStock = stock;
        }
        public string Name { get; set; }
        public string Category { get; set; } = "Watersports";
        public decimal? Price { get; set; }
        public Product Related { get; set; }
        public bool InStock { get; }
        public static Product[] GetProducts()
        {
            Product kayak = new Product
            {
                Name = "Kayak",
                Category = "Water Craft",
                Price = 275M
            };
            Product lifejacket = new Product(false)
            {
                Name = "Lifejacket",
                Price = 48.95M
            };

            kayak.Related = lifejacket;
            return new Product[] { kayak, lifejacket, null };
        }
    }
}

//ShoppingPlan.cs

using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace LanguageFeature.Models
{
    public class ShoppingCart : IEnumerable<Product>
    {
        public IEnumerable<Product> Products { get; set; }
        public IEnumerator<Product> GetEnumerator()
        {
            return Products.GetEnumerator();
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}

//index.cshtml


@model IEnumerable<string>
@{ Layout = null; }
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Language Features</title>
</head>
<body>
    <h1>This Content is from the home controller</h1>
    <ul>
        @foreach (string s in Model)
        {
            <li>@s</li>
        }
    </ul>
</body>
</html>

//Program.cs

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace LanguageFeature
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateWebHostBuilder(args).Build().Run();
            //same as
            //HostBuilder hb = HostBuilder();
            //hb.Run()
        }

        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .UseStartup<Startup>();
    }
}

//Starup.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;

namespace LanguageFeature
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            app.UseMvcWithDefaultRoute();


            // app.UseRouting();

            //app.UseEndpoints(endpoints =>
            // {
            // endpoints.MapGet("/", async context =>
            //{
            // await context.Response.WriteAsync("Hello World!");
            // });
            //});
        }
    }
}
