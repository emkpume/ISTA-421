
# Name : Emeka Mkpume

## File : MVC_CH_3_HW_3

### Date : March 4, 2020


Read chapter 3, pages 51 – 66 in the Pro ASP.NET MVC 5 book.


1. The book states, “Interactions with an MVC application follow a natural cycle of user actions and view
updates, where the view is assumed to be stateless.” What does it mean for the view to be stateless?
2. The book identifies two kinds of models. Briefly desdribe each of them.

Models—the M in MVC—contain the data that users work with.
(a). view models : represent just data passed from the controller to the view,
(b). Domain models : contain the data in a business domain, along with the operations, transformations, and
rules for creating, storing, and manipulating that data, collectively referred to as the model logic.

3. Give an example of separation of concerns from your own life experience. This should be a simple,
everyday example.

separation of concerns (SoC) is a design principle for separating a computer program into distinct sections 
such that each section addresses a separate concern. I separate my military life from my business life.

4. What is a view engine?

View Engine is responsible for rendering the view into html form to the browser. By default, Asp.net MVC
support Web Form(ASPX) and Razor View Engine. There are many third party view engines (like Spark, Nhaml etc.) 
that are also available for Asp.net MVC. ... The namespace for Razor Engine is System.

5. The book notes that the three-tier structure, or n-tier model, is “the most widely used pattern for
business applications.” Why do you think that this is true? An answer like, “Because it works well,”
is not a sufficient answer to this question.

N-tier architecture or multilayered architecture is a client–server architecture in which presentation, 
application processing and data management functions are physically separated. N-tier application architecture
provides a model by which developers can create flexible and reusable applications. By segregating an 
application into tiers, developers acquire the option of modifying or adding a specific layer, instead 
of reworking the entire application.

6. This question requires some outside research. When we study UWP, you will see that the UWP design
pattern is the Model-View-ViewModel (MVVM). What is the difference between MVC and MVVM
that makes the first good for ASP.NET MVC and the second good for UWP?
7. Describe the two parts of the dependency injection (DI) design pattern.
8. Give an example of loose coupling from your own life experience. This should be a simple, everyday
example.
9. What are the two types of testing discussed in the book?
10. What are the seven steps of the test driven development (TDD) workflow, as stated in the book?
Page 1, Revised on January 16, 20